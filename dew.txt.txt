package com.cube;

import java.util.Random;

public class Rubik {
    private static final int U1 = 0, U2 = 1, U3 = 2, U4 = 3, U5 = 4, U6 = 5, U7 = 6, U8 = 7, U9 = 8, R1 = 9, R2 = 10, R3 = 11, R4 = 12, R5 = 13, R6 = 14, R7 = 15, R8 = 16, R9 = 17, F1 = 18, F2 = 19, F3 = 20, F4 = 21, F5 = 22, F6 = 23, F7 = 24, F8 = 25, F9 = 26, D1 = 27, D2 = 28, D3 = 29, D4 = 30, D5 = 31, D6 = 32, D7 = 33, D8 = 34, D9 = 35, L1 = 36, L2 = 37, L3 = 38, L4 = 39, L5 = 40, L6 = 41, L7 = 42, L8 = 43, L9 = 44, B1 = 45, B2 = 46, B3 = 47, B4 = 48, B5 = 49, B6 = 50, B7 = 51, B8 = 52, B9 = 53;

    private static final String[] MOVE_STR = {"U", "U2", "U'", "R", "R2", "R'", "F", "F2", "F'", "D", "D2", "D'", "L", "L2", "L'", "B", "B2", "B'"};

    private static final int PRE_MOVE = 5;

    private static final Random random = new Random();
    
    public static void main(String[] args) {
        //随机的边界可以改动(nextInt(18))
        int[] cube = new int[54];
        random.setSeed(System.currentTimeMillis());
        initSolvedCube(cube);
        for (int i = 0; i < 1000; i++) {
            //循环1000次,打乱魔方,转魔方
            int move = random.nextInt(1000) % 18;
            doMove(cube, move);
        }
        System.out.println("打乱后的魔方:\n" +
                "             |***********|\n" +
                "             |**"+cube[0]+"**"+cube[1]+"**"+cube[2]+"**|\n" +
                "             |***********|\n" +
                "             |**"+cube[3]+"**"+cube[4]+"**"+cube[5]+"**|\n" +
                "             |***********|\n" +
                "             |**"+cube[6]+"**"+cube[7]+"**"+cube[8]+"**|\n" +
                "             |***********|\n" +
                " |***********|***********|***********|***********|\n" +
                " |**"+cube[36]+"**"+cube[37]+"**"+cube[38]+"**|**"+cube[18]+"**"+cube[19]+"**"+cube[20]+"**|**"+cube[9]+"**"+cube[10]+"**"+cube[11]+"**|**"+cube[45]+"**"+cube[46]+"**"+cube[47]+"**|\n" +
                " |***********|***********|***********|***********|\n" +
                " |**"+cube[39]+"**"+cube[40]+"**"+cube[41]+"**|**"+cube[21]+"**"+cube[22]+"**"+cube[23]+"**|**"+cube[12]+"**"+cube[13]+"**"+cube[14]+"**|**"+cube[48]+"**"+cube[49]+"**"+cube[50]+"**|\n" +
                " |***********|***********|***********|***********|\n" +
                " |**"+cube[42]+"**"+cube[43]+"**"+cube[44]+"**|**"+cube[24]+"**"+cube[25]+"**"+cube[26]+"**|**"+cube[15]+"**"+cube[16]+"**"+cube[17]+"**|**"+cube[51]+"**"+cube[52]+"**"+cube[53]+"**|\n" +
                " |***********|***********|***********|***********|\n" +
                "             |***********|\n" +
                "             |**"+cube[27]+"**"+cube[28]+"**"+cube[29]+"**|\n" +
                "             |***********|\n" +
                "             |**"+cube[30]+"**"+cube[31]+"**"+cube[32]+"**|\n" +
                "             |***********|\n" +
                "             |**"+cube[33]+"**"+cube[34]+"**"+cube[35]+"**|\n" +
                "             |***********|");
        solve(cube);
        System.out.println("还原后的魔方:\n" +
                "             |***********|\n" +
                "             |**"+cube[0]+"**"+cube[1]+"**"+cube[2]+"**|\n" +
                "             |***********|\n" +
                "             |**"+cube[3]+"**"+cube[4]+"**"+cube[5]+"**|\n" +
                "             |***********|\n" +
                "             |**"+cube[6]+"**"+cube[7]+"**"+cube[8]+"**|\n" +
                "             |***********|\n" +
                " |***********|***********|***********|***********|\n" +
                " |**"+cube[36]+"**"+cube[37]+"**"+cube[38]+"**|**"+cube[18]+"**"+cube[19]+"**"+cube[20]+"**|**"+cube[9]+"**"+cube[10]+"**"+cube[11]+"**|**"+cube[45]+"**"+cube[46]+"**"+cube[47]+"**|\n" +
                " |***********|***********|***********|***********|\n" +
                " |**"+cube[39]+"**"+cube[40]+"**"+cube[41]+"**|**"+cube[21]+"**"+cube[22]+"**"+cube[23]+"**|**"+cube[12]+"**"+cube[13]+"**"+cube[14]+"**|**"+cube[48]+"**"+cube[49]+"**"+cube[50]+"**|\n" +
                " |***********|***********|***********|***********|\n" +
                " |**"+cube[42]+"**"+cube[43]+"**"+cube[44]+"**|**"+cube[24]+"**"+cube[25]+"**"+cube[26]+"**|**"+cube[15]+"**"+cube[16]+"**"+cube[17]+"**|**"+cube[51]+"**"+cube[52]+"**"+cube[53]+"**|\n" +
                " |***********|***********|***********|***********|\n" +
                "             |***********|\n" +
                "             |**"+cube[27]+"**"+cube[28]+"**"+cube[29]+"**|\n" +
                "             |***********|\n" +
                "             |**"+cube[30]+"**"+cube[31]+"**"+cube[32]+"**|\n" +
                "             |***********|\n" +
                "             |**"+cube[33]+"**"+cube[34]+"**"+cube[35]+"**|\n" +
                "             |***********|");
    }

    private static void solve(int[] cube) {
        int[] solvedCube = new int[54];
        int[] cubeTemp = new int[54];
        int[] algMoves = new int[8];
        int[] preMoveList = new int[PRE_MOVE];
        int algStartIndex;
        int sum = 0;
        initSolvedCube(solvedCube);
        //初始化solveCube魔方
        int curDistance = distance(cube, solvedCube);
        int tempDistance;
        while (curDistance != 0) {
            //没有还原
            copyCube(cubeTemp, cube);
            //定义一个临时魔方数组,复制转换后的魔方数组
            if (curDistance / 100 == 2) {
                //奇数同位,如果有两个棱不对，直接转一下U搞定校验。
                doMove(cubeTemp, 0);
                System.out.println("U ");
                curDistance = 10000;
            }
            for (int i = 0; i < PRE_MOVE; i++) {
                preMoveList[i] = random.nextInt(1000) % 18;
                doMove(cubeTemp, preMoveList[i]);
            }
            algMoves[0] = random.nextInt(1000) % 18;
            algMoves[1] = random.nextInt(1000) % 18;
            algMoves[2] = invMove(algMoves[0]);
            algMoves[3] = random.nextInt(1000) % 18;
            algMoves[4] = algMoves[0];
            algMoves[5] = invMove(algMoves[1]);
            algMoves[6] = invMove(algMoves[0]);
            algMoves[7] = invMove(algMoves[3]);

            algStartIndex = random.nextInt(1000) % 8;
            for (int i = 0; i < 8; i++) {
                doMove(cubeTemp, algMoves[(i + algStartIndex) % 8]);
            }

            for (int i = PRE_MOVE-1; i >= 0; i--) {
                doMove(cubeTemp, invMove(preMoveList[i]));
            }

            tempDistance = distance(cubeTemp,solvedCube);
            if (tempDistance<curDistance+2&&distance(cubeTemp,cube)!=0){
                if (tempDistance<curDistance){
                    curDistance=tempDistance;
                }
                copyCube(cube,cubeTemp);

                for (int i = 0; i < PRE_MOVE; i++) {
                    System.out.println(MOVE_STR[preMoveList[i]]);
                    sum++;
                }

                for (int i = 0; i < 8; i++) {
                    System.out.println(MOVE_STR[algMoves[(i + algStartIndex) % 8]]);
                    sum++;
                }

                for (int i = 0; i < PRE_MOVE - 1; i++) {
                    System.out.println(MOVE_STR[invMove(preMoveList[i])]);
                    sum++;
                }

            }
        }System.out.println("总共转了"+sum+"次");
    }

    private static int invMove(int move) {
        return move / 3 * 3 + 2 - move % 3;
    }

    private static void copyCube(int[] cubeTemp, int[] cube) {
        System.arraycopy(cube, 0, cubeTemp, 0, 54);
    }

    private static int distance(int[] cube, int[] solvedCube) {
        //定义当前状态和还原状态的距离。直接算计算还有几个颜色不对
        int distancesEdge = 0;
        //棱块
        int distancesCorn = 0;
        //角块
        for (int i = 0; i < 54; i++) {
            if (cube[i] == solvedCube[i]) {
                continue;
            }
            if (i % 9 % 2 == 0) {
                distancesCorn++;
            } else {
                distancesEdge++;
            }
        }
        return distancesEdge * 100 + distancesCorn;
        //提高棱块的优先度
    }

    private static void doMove(int[] cube, int move) {
        //axis: U=0, R=1, F=2, D=3, L=4, B=5(转轴选择)
        //move = axis * 3 + power
        //power: 0=clockwise(顺时针方向), 1=180 degrees(180度转), 2=anti-clockwise(逆时针方向)
        int axis = move / 3;
        int power = move % 3;
        switch (axis) {
            case 0:
                swap4(cube, U1, U3, U9, U7, power);
                swap4(cube, U2, U6, U8, U4, power);
                swap4(cube, F1, L1, B1, R1, power);
                swap4(cube, F2, L2, B2, R2, power);
                swap4(cube, F3, L3, B3, R3, power);
                break;
            case 1:
                swap4(cube, R1, R3, R9, R7, power);
                swap4(cube, R2, R6, R8, R4, power);
                swap4(cube, U3, B7, D3, F3, power);
                swap4(cube, U6, B4, D6, F6, power);
                swap4(cube, U9, B1, D9, F9, power);
                break;
            case 2:
                swap4(cube, F1, F3, F9, F7, power);
                swap4(cube, F2, F6, F8, F4, power);
                swap4(cube, U7, R1, D3, L9, power);
                swap4(cube, U8, R4, D2, L6, power);
                swap4(cube, U9, R7, D1, L3, power);
                break;
            case 3:
                swap4(cube, D1, D3, D9, D7, power);
                swap4(cube, D2, D6, D8, D4, power);
                swap4(cube, F7, R7, B7, L7, power);
                swap4(cube, F8, R8, B8, L8, power);
                swap4(cube, F9, R9, B9, L9, power);
                break;
            case 4:
                swap4(cube, L1, L3, L9, L7, power);
                swap4(cube, L2, L6, L8, L4, power);
                swap4(cube, U1, F1, D1, B9, power);
                swap4(cube, U4, F4, D4, B6, power);
                swap4(cube, U7, F7, D7, B3, power);
                break;
            case 5:
                swap4(cube, B1, B3, B9, B7, power);
                swap4(cube, B2, B6, B8, B4, power);
                swap4(cube, U3, L1, D7, R9, power);
                swap4(cube, U2, L4, D8, R6, power);
                swap4(cube, U1, L7, D9, R3, power);
                break;
            default:
                break;
        }

    }

    private static void swap4(int[] cube, int index1, int index2, int index3, int index4, int rep) {
        {
            int tmp;
            for (int i = 0; i <= rep; ++i) {
                tmp = cube[index4];
                cube[index4] = cube[index3];
                cube[index3] = cube[index2];
                cube[index2] = cube[index1];
                cube[index1] = tmp;
            }
        }

    }
    private static void initSolvedCube(int[] cube) {
        //将cube[54]数组设置为9个0,9个1.....9个5
        //对应魔方的6个面
        for (int i = 0; i < 54; ++i) {
            cube[i] = i / 9;
        }
    }
}